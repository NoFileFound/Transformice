package org.transformice.command.commands.player;

// Imports
import java.util.List;
import org.transformice.Client;
import org.transformice.Server;
import org.transformice.command.Command;
import org.transformice.command.CommandHandler;
@Command(
        name = "luahelp",
        description = "Shows the Lua tree.",
        permission = Command.CommandPermission.PLAYER
)
@SuppressWarnings("unused")
public final class LuaHelp implements CommandHandler {
    @Override
    public void execute(Client player, Server server, List<String> args) {
        String builder =
                "<V><font size='14'>Version 0.28</font></V><br><br>" + """
                <font size='20'>Events</font></O><br><br>
                <D>eventChatCommand</D>(<V>playerName</V>, <V>command</V>)<br>This event is triggered when a player uses a chat command (a message beginning with !).<br>  <V>playerName</V><G> (String)</G><BL> the player who sent the command</BL><br>  <V>command</V><G> (String)</G><BL> the message (without the initial !)</BL><br><br>
                <D>eventChatMessage</D>(<V>playerName</V>, <V>message</V>)<br>This event is triggered when a player talks in the room chat.<br>  <V>playerName</V><G> (String)</G><BL> the player who sent the message</BL><br>  <V>message</V><G> (String)</G><BL> the message</BL><br><br>
                <D>eventEmotePlayed</D>(<V>playerName</V>, <V>emoteType</V>, <V>emoteParam</V>)<br>This event is triggered when the player does an emote.<br>  <V>playerName</V><G> (String)</G><BL> the player who did the emote</BL><br>  <V>emoteType</V><G> (Int)</G><BL> the type of emote played</BL><br>  <V>emoteParam</V><G> (String)</G><BL> the parameter used with the emote (only applies to the flag one)</BL><br><br>
                <D>eventFileLoaded</D>(<V>fileNumber</V>, <V>fileData</V>)<br>This event is triggered when a file gets fully loaded.<br>  <V>fileNumber</V><G> (String)</G><BL> the file identifier</BL><br>  <V>fileData</V><G> (String)</G><BL> the file data</BL><br><br>
                <D>eventFileSaved</D>(<V>fileNumber</V>)<br>This event is triggered when a file gets saved.<br>  <V>fileNumber</V><G> (String)</G><BL> the name of the file</BL><br><br>
                <D>eventKeyboard</D>(<V>playerName</V>, <V>keyCode</V>, <V>down</V>, <V>xPlayerPosition</V>, <V>yPlayerPosition</V>, <V>xPlayerVelocity</V>, <V>yPlayerVelocity</V>)<br>This event is triggered when a player presses a key.<br>  <V>playerName</V><G> (String)</G><BL> the player who typed the key</BL><br>  <V>keyCode</V><G> (Int)</G><BL> the code of the typed key</BL><br>  <V>down</V><G> (Boolean)</G><BL> whether it was the press event, or the release one</BL><br>  <V>xPlayerPosition</V><G> (Int)</G><BL> the horizontal coordinate of the player when he or she typed the key</BL><br>  <V>yPlayerPosition</V><G> (Int)</G><BL> the vertical coordinate of the player when he or she typed the key</BL><br>  <V>xPlayerVelocity</V><G> (Number)</G><BL> the horizontal velocity of the player when he or she typed the key</BL><br>  <V>yPlayerVelocity</V><G> (Number)</G><BL> the vertical velocity of the player when he or she typed the key</BL><br><br>
                <D>eventMouse</D>(<V>playerName</V>, <V>xMousePosition</V>, <V>yMousePosition</V>)<br>This event is triggered when a player perfoms a mouse click.<br>  <V>playerName</V><G> (String)</G><BL> the player who made the click</BL><br>  <V>xMousePosition</V><G> (Int)</G><BL> the horizontal coordinate of the mouse click</BL><br>  <V>yMousePosition</V><G> (Int)</G><BL> the vertical coordinate of the mouse click</BL><br><br>
                <D>eventLoop</D>(<V>elapsedTime</V>, <V>remainingTime</V>)<br>This event occurs every 500 milliseconds.<br>  <V>elapsedTime</V><G> (Int)</G><BL> the time in milliseconds elapsed since the beginning of the round</BL><br>  <V>remainingTime</V><G> (Int)</G><BL> the time in milliseconds remaining before the next round</BL><br><br>
                <D>eventNewGame</D>()<br>This event is triggered when a new round begins.<br><br>
                <D>eventNewPlayer</D>(<V>playerName</V>)<br>This event is triggered when a new player joins the room.<br>  <V>playerName</V><G> (String)</G><BL> the player who joined the room</BL><br><br>
                <D>eventPlayerDataLoaded</D>(<V>playerName</V>, <V>playerData</V>)<br>This event is triggered when player data gets loaded.<br>  <V>playerName</V><G> (String)</G><BL> the player whose data got loaded</BL><br>  <V>playerData</V><G> (String)</G><BL> the data about the player</BL><br><br>
                <D>eventPlayerDied</D>(<V>playerName</V>)<br>This event is triggered when a player dies.<br>  <V>playerName</V><G> (String)</G><BL> the player who died</BL><br><br>
                <D>eventPlayerGetCheese</D>(<V>playerName</V>)<br>This event is triggered when a player gets the cheese.<br>  <V>playerName</V><G> (String)</G><BL> the player who got the cheese</BL><br><br>
                <D>eventPlayerBonusGrabbed</D>(<V>playerName</V>, <V>bonusId</V>)<br>This event is triggered when a player grab a defilante bonus.<br>  <V>playerName</V><G> (String)</G><BL> The player who grabbed the bonus.</BL><br>  <V>bonusId</V><G> (Int)</G><BL> Bonus identifier.</BL><br><br>
                <D>eventPlayerLeft</D>(<V>playerName</V>)<br>This event is triggered when a player leaves the room.<br>  <V>playerName</V><G> (String)</G><BL> the player who left the room</BL><br><br>
                <D>eventPlayerVampire</D>(<V>playerName</V>)<br>This event is triggered when a player turns into a vampire.<br>  <V>playerName</V><G> (String)</G><BL> the player who turned into a vampire</BL><br><br>
                <D>eventPlayerWon</D>(<V>playerName</V>, <V>timeElapsed</V>, <V>timeElapsedSinceRespawn</V>)<br>This event triggers when a player enters the hole.<br>  <V>playerName</V><G> (String)</G><BL> the player who entered the hole</BL><br>  <V>timeElapsed</V><G> (Int)</G><BL> the time in milliseconds elapsed since the beginning of the round</BL><br>  <V>timeElapsedSinceRespawn</V><G> (Int)</G><BL> the time in milliseconds elapsed since the last respawn</BL><br><br>
                <D>eventPlayerRespawn</D>(<V>playerName</V>)<br>This event is triggered when a player respawns.<br>  <V>playerName</V><G> (String)</G><BL> the player who respawned</BL><br><br>
                <D>eventPlayerMeep</D>(<V>playerName</V>, <V>xPosition</V>, <V>yPosition</V>)<br>This event is triggered when a player meeps.<br>  <V>playerName</V><G> (String)</G><BL> the player who meeped</BL><br>  <V>xPosition</V><G> (Int)</G><BL> the horizontal coordinate of the player when they meeped</BL><br>  <V>yPosition</V><G> (Int)</G><BL> the vertical coordinate of the player when they meeped</BL><br><br>
                <D>eventPopupAnswer</D>(<V>popupId</V>, <V>playerName</V>, <V>answer</V>)<br>This event is triggered when a player answers a popup (only type 1 and 2 popups).<br>  <V>popupId</V><G> (Int)</G><BL> the popup identifier</BL><br>  <V>playerName</V><G> (String)</G><BL> the player who answered the popup</BL><br>  <V>answer</V><G> (String)</G><BL> the player's answer</BL><br><BL>    - yes or no for a type 1 popup</BL><br><BL>    - any string for a type 2 poup</BL><br><br>
                <D>eventSummoningStart</D>(<V>playerName</V>, <V>objectType</V>, <V>xPosition</V>, <V>yPosition</V>, <V>angle</V>)<br>This event is triggered when a player starts summoning a shaman object.<br>  <V>playerName</V><G> (String)</G><BL> the player who started summoning</BL><br>  <V>objectType</V><G> (Int)</G><BL> the kind of shaman object being summoned</BL><br>  <V>xPosition</V><G> (Int)</G><BL> the horizontal coordinate of the summoning point</BL><br>  <V>yPosition</V><G> (Int)</G><BL> the vertical coordinate of the summoning point</BL><br>  <V>angle</V><G> (Int)</G><BL> the rotation angle of the object being summoned</BL><br><br>
                <D>eventSummoningCancel</D>(<V>playerName</V>)<br>This event is triggered when a player cancels an object invocation.<br>  <V>playerName</V><G> (String)</G><BL> the player who stopped summoning</BL><br><br>
                <D>eventSummoningEnd</D>(<V>playerName</V>, <V>objectType</V>, <V>xPosition</V>, <V>yPosition</V>, <V>angle</V>, <V>objectDescription</V>)<br>This event triggers when a player has finished an invocation.<br>  <V>playerName</V><G> (String)</G><BL> the player who summoned the object</BL><br>  <V>objectType</V><G> (Int)</G><BL> the kind of the object</BL><br>  <V>xPosition</V><G> (Int)</G><BL> the horizontal position of the summoned object</BL><br>  <V>yPosition</V><G> (Int)</G><BL> the vertical position of the summoned object</BL><br>  <V>angle</V><G> (Int)</G><BL> the rotation angle of the summoned object</BL><br>  <V>objectDescription</V><G> (Table)</G><BL> the object table description as it would appear in the room's objectList</BL><br><br>
                <D>eventTextAreaCallback</D>(<V>textAreaId</V>, <V>playerName</V>, <V>eventName</V>)<br>This event is triggered when a player clicks a text event.<br>Text event links are anchors tags links beginning with the "event:" string (e.g. : <a href='event:callbackString'>Click here</a>).<br>If the link eventName begins with '#clear,' the text area will be cleared, and the received eventName will be the text following the coma.<br>  <V>textAreaId</V><G> (Int)</G><BL> the text area identifier</BL><br>  <V>playerName</V><G> (String)</G><BL> the player who clicked</BL><br>  <V>eventName</V><G> (String)</G><BL> the name of the clicked text event</BL><br><br>
                <D>eventColorPicked</D>(<V>colorPickerId</V>, <V>playerName</V>, <V>color</V>)<br>This event is triggered when a player chooses a color with a color picker.<br>  <V>colorPickerId</V><G> (Int)</G><BL> the color picker identifier</BL><br>  <V>playerName</V><G> (String)</G><BL> the player who picked a color</BL><br>  <V>color</V><G> (Int)</G><BL> the color picked (-1 if the player didn't picked one))</BL><br><br>
                <D>eventContactListener</D>(<V>playerName</V>, <V>groundId</V>, <V>contactInfos</V>)<br>This event is triggered when a player hit a ground with a contact listener.<br>  <V>playerName</V><G> (String)</G><BL> the player who hit the ground</BL><br>  <V>groundId</V><G> (Int)</G><BL> ground identifier</BL><br>  <V>contactInfos</V><G> (Table)</G><BL> Collision informations</BL><br><br>
                <D>eventTalkToNPC</D>(<V>playerName</V>, <V>npcName</V>)<br>This event is triggered when a player click on a NPC.<br>  <V>playerName</V><G> (String)</G><BL> The player who talk to the NPC</BL><br>  <V>npcName</V><G> (String)</G><BL> The NPC name</BL><br><br>
                <O><font size='20'>Functions</font></O><br><br>
                <D>debug.disableEventLog</D>(<V>activate</V>)<br>Deactivates the events log.<br>  <V>activate</V><G> (Boolean)</G><BL> whether it should be active</BL> <G>(default true)</G><br><br>
                <D>debug.getCurrentThreadName</D>()<br>Get current functions thread name.<br><br>
                <D>system.bindKeyboard</D>(<V>playerName</V>, <V>keyCode</V>, <V>down</V>, <V>activate</V>)<br>Listens to the player's keyboard events.<br>  <V>playerName</V><G> (String)</G><BL> the player you want to listen keyboard events from</BL><br>  <V>keyCode</V><G> (Int)</G><BL> the code of the key you want to listen</BL><br><BL>    - to accurately listen for player movement (both arrows and wasd/zqsd keys), you can use 0 (left), 1 (up), 2 (right) or 3 (down)</BL><br><BL>    - regular AS3 keycodes can be found on https://help.adobe.com/fr_FR/FlashPlatform/reference/actionscript/3/flash/ui/Keyboard.html</BL><br>  <V>down</V><G> (Boolean)</G><BL> whether it should listen for the press event, or the release one</BL><br>  <V>activate</V><G> (Boolean)</G><BL> whether it should be active</BL> <G>(default true)</G><br><br>
                <D>system.bindMouse</D>(<V>playerName</V>, <V>active</V>)<br>Listens to a player's mouse events.<br>  <V>playerName</V><G> (String)</G><BL> the player you want to listen mouse events from</BL><br>  <V>active</V><G> (Boolean)</G><BL> whether it should be active</BL> <G>(default true)</G><br><br>
                <D>system.disableChatCommandDisplay</D>(<V>command</V>, <V>hide</V>)<br>Prevents a module command (commands starting with !) to be displayed in the room. If the supplied command is nil, the parameter will apply to all the commands.<br>  <V>command</V><G> (String)</G><BL> the command (without the initial !) to hide</BL> <G>(default nil)</G><br>  <V>hide</V><G> (Boolean)</G><BL> whether the command should be hided</BL> <G>(default true)</G><br><br>
                <D>system.exit</D>()<br>Deactivates the functions script running.<br><br>
                <D>system.giveAdventurePoint</D>(<V>playerName</V>, <V>Achievement code.</V>, <V>Amount</V>)<br>Gives adventure points to a player..<br>  <V>playerName</V><G> (String)</G><BL> Target player.</BL><br>  <V>Achievement code.</V><G> (String)</G><BL> The achievement code to increase.</BL><br>  <V>Amount</V><G> (Int)</G><BL> The amount value.</BL> <G>(default 1)</G><br><br>
                <D>system.giveEventGift</D>(<V>playerName</V>, <V>giftCode</V>)<br>Gives an event reward to the targeted player.<br>  <V>playerName</V><G> (String)</G><BL> the player to give the gift to</BL><br>  <V>giftCode</V><G> (String)</G><BL> the gift identifier (given by an admin)</BL><br><br>
                <D>system.loadFile</D>(<V>fileNumber</V>)<br>Requests the loading of a data file. The event eventFileLoaded is triggered when the file gets loaded.<br>  <V>fileNumber</V><G> (Int)</G><BL> the identifier of the file to load</BL> <G>(default 0)</G><br><R>Returns</R> <G>(Boolean)</G> <BL>whether the loading got started</BL><br><br>
                <D>system.loadPlayerData</D>(<V>playerName</V>)<br>Requests the loading of the player's data for this module. The event eventPlayerDataLoaded is triggered when the player data gets loaded.<br>  <V>playerName</V><G> (String)</G><BL> the player about whom you want to get the data</BL><br><R>Returns</R> <G>(Boolean)</G> <BL>whether the loading got started</BL><br><br>
                <D>system.luaEventLaunchInterval</D>(<V>interval</V>, <V>random</V>)<br>Set or get the timer interval between two events.<br>  <V>interval</V><G> (Int)</G><BL> Timer interval in min (default 40 min), can\\'t be less than 40 min.</BL><br>  <V>random</V><G> (Int)</G><BL> Random added  interval in min (default 20 min).</BL><br><br>
                <D>system.newTimer</D>(<V>callback</V>, <V>time</V>, <V>loop</V>, <V>arg1</V>, <V>arg2</V>, <V>arg3</V>, <V>arg4</V>)<br>Creates a new timer to call a function after a delay, once or continuously.<br>  <V>callback</V><G> (Function)</G><BL> The function to call</BL><br>  <V>time</V><G> (Int)</G><BL> the number of milliseconds that the function call should be delayed by</BL><br>  <V>loop</V><G> (Boolean)</G><BL> whether the function call should loop or happen only once</BL> <G>(default false)</G><br>  <V>arg1</V><G> (Object)</G><BL> 1st argument of the callback function</BL> <G>(default nil)</G><br>  <V>arg2</V><G> (Object)</G><BL> 2nd argument of the callback function</BL> <G>(default nil)</G><br>  <V>arg3</V><G> (Object)</G><BL> 3rd argument of the callback function</BL> <G>(default nil)</G><br>  <V>arg4</V><G> (Object)</G><BL> 4th argument of the callback function</BL> <G>(default nil)</G><br><R>Returns</R> <G>(Int)</G> <BL>the new timer id</BL><br><br>
                <D>system.openEventShop</D>(<V>eventName</V>, <V>playerName</V>)<br>Open the shop of the specified event.<br>  <V>eventName</V><G> (String)</G><BL> Event name.</BL><br>  <V>playerName</V><G> (String)</G><BL> Target player name.</BL><br><br>
                <D>system.removeTimer</D>(<V>timerId</V>)<br>Destroys a timer.<br>  <V>timerId</V><G> (Int)</G><BL> the identifier of the timer to stop</BL><br><br>
                <D>system.saveFile</D>(<V>data</V>, <V>fileNumber</V>)<br>Requests the saving of a data file (throttled to one per minute). The event eventFileSaved is triggered when the file get saved.<br>  <V>data</V><G> (String)</G><BL> the data to store in the file</BL><br>  <V>fileNumber</V><G> (Int)</G><BL> the identifier (from 0 to 99) of the file to write the data in</BL> <G>(default 0)</G><br><R>Returns</R> <G>(Boolean)</G> <BL>whether the saving got started</BL><br><br>
                <D>system.savePlayerData</D>(<V>playerName</V>, <V>data</V>)<br>Saves module data about a player. Please note that this data is per player and per Lua dev, so take care not to overwrite data from another one of your modules.<br>  <V>playerName</V><G> (String)</G><BL> the player about whom you want to save data</BL><br>  <V>data</V><G> (String)</G><BL> the player data to save</BL><br><br>
                <D>system.setLuaEventBanner</D>(<V>bannerId</V>)<br>Set the login event banner.<br>  <V>bannerId</V><G> (Int)</G><BL> Banner id.</BL><br><br>
                <D>tfm.exec.addBonus</D>(<V>type</V>, <V>x</V>, <V>y</V>, <V>id</V>, <V>angle</V>, <V>visible</V>, <V>targetPlayer</V>)<br>Add defilante bonus.<br>  <V>type</V><G> (Int)</G><BL> Bonus type (see tfm.enum.bonus)</BL> <G>(default 1)</G><br>  <V>x</V><G> (Int)</G><BL> X position.</BL> <G>(default 0)</G><br>  <V>y</V><G> (Int)</G><BL> Y position.</BL> <G>(default 0)</G><br>  <V>id</V><G> (Int)</G><BL> Identifier.</BL> <G>(default 0)</G><br>  <V>angle</V><G> (Int)</G><BL> Angle (deg).</BL> <G>(default 0)</G><br>  <V>visible</V><G> (Boolean)</G><BL> Make the bonus visible or not.</BL> <G>(default true)</G><br>  <V>targetPlayer</V><G> (String)</G><BL> Send only to this specific player.</BL> <G>(default nil)</G><br><br>
                <D>tfm.exec.addConjuration</D>(<V>xPosition</V>, <V>yPosition</V>, <V>duration</V>)<br>Adds conjuration to the map. Note: Grid coordinate are regular coordinate divided by 10 (as conjuration is a 10x10 pixel square).<br>  <V>xPosition</V><G> (Int)</G><BL> the horizontal grid coordinate of the conjuration</BL><br>  <V>yPosition</V><G> (Int)</G><BL> the vertical grid coordinate of the conjuration</BL><br>  <V>duration</V><G> (Int)</G><BL> the duration of the conjuration in milliseconds</BL> <G>(default 10000)</G><br><br>
                <D>tfm.exec.addImage</D>(<V>imageId</V>, <V>target</V>, <V>xPosition</V>, <V>yPosition</V>, <V>targetPlayer</V>, <V>scaleX</V>, <V>scaleY</V>, <V>rotation</V>, <V>alpha</V>, <V>anchorX</V>, <V>anchorY</V>, <V>fadeIn</V>)<br>Displays an image on the map.<br>  <V>imageId</V><G> (String)</G><BL> the image identifier</BL><br>  <V>target</V><G> (String)</G><BL> the game element to attach the image to</BL><br><BL>    - #mobileId</BL><br><BL>    - =mobileId (keep current sprite)</BL><br><BL>    - $playerName (on the mouse sprite)</BL><br><BL>    - %playerName (with the mouse sprite removed)</BL><br><BL>    - ?backgroundLayerDepth</BL><br><BL>    - _groundLayerDepth</BL><br><BL>    - !foregroundLayerDepth</BL><br><BL>    - &fixedLayerDepthBeforeLuaInterfaces</BL><br><BL>    - :fixedLayerDepthBehindLuaInterfaces</BL><br><BL>    - ~fixedLayerDepthWithLuaInterfaces</BL><br><BL>    - +physicObjectId</BL><br>  <V>xPosition</V><G> (Int)</G><BL> the horizontal offset of the top-left corner of the image (0 being the middle of the game element)</BL> <G>(default 0)</G><br>  <V>yPosition</V><G> (Int)</G><BL> the vertical offset of the top-left corner of the image (0 being the middle of the game element)</BL> <G>(default 0)</G><br>  <V>targetPlayer</V><G> (String)</G><BL> the player who will see the image (if nil, applies to all players)</BL> <G>(default nil)</G><br>  <V>scaleX</V><G> (Number)</G><BL> Image scale X</BL> <G>(default 1)</G><br>  <V>scaleY</V><G> (Number)</G><BL> Image scale Y</BL> <G>(default 1)</G><br>  <V>rotation</V><G> (Number)</G><BL> Image rotation in radian</BL> <G>(default 0)</G><br>  <V>alpha</V><G> (Number)</G><BL> Image alpha</BL> <G>(default 1)</G><br>  <V>anchorX</V><G> (Number)</G><BL> Image anchor X (0..1)</BL> <G>(default 0)</G><br>  <V>anchorY</V><G> (Number)</G><BL> Image anchor Y (0..1)</BL> <G>(default 0)</G><br>  <V>fadeIn</V><G> (Boolean)</G><BL> Use a fade in to display the image.</BL> <G>(default false)</G><br><R>Returns</R> <G>(Int)</G> <BL>the image identifier</BL><br><br>
                <D>tfm.exec.addJoint</D>(<V>id</V>, <V>ground1</V>, <V>ground2</V>, <V>jointDef</V>)<br>Adds a joint between two physic objects. . Note: In map XML codes, you can also add a functions="id" property in a joint definition to be able to interact with it with LUA code.<br>  <V>id</V><G> (Int)</G><BL> the identifier of the joint</BL><br>  <V>ground1</V><G> (Int)</G><BL> the first ground the joint will affect</BL><br>  <V>ground2</V><G> (Int)</G><BL> the second ground the joint will affect</BL><br>  <V>jointDef</V><G> (Table)</G><BL> the ground description</BL><br><BL>    - type (Int): 0 -> distance joint, 1 -> prismatic joint, 2 -> pulley joint, 3 -> revolute joint</BL><br><BL>    - point1 (String "x,y"): location of the ground1 anchor (default: the ground1's center)</BL><br><BL>    - point2 (String "x,y"): location of the ground2 anchor (default: the ground2's center), only used with distance and pulley joints</BL><br><BL>    - point3 (String "x,y"), point4 (String "x,y"): locations of the pulley's anchors, only used with pulley joints</BL><br><BL>    - frequency (Float), damping (Float): distance joints\\' frequency and damping ratio</BL><br><BL>    - axis (String "x,y"), angle (Int): prismatic joints\\' axis and angle</BL><br><BL>    - limit1 (Float), limit2 (Float), forceMotor (Float), speedMotor (Float): prismatic and revolute joints\\' translation/rotation limits and motors</BL><br><BL>    - ratio (Float): revolute joints\\' ratio</BL><br><BL>    - line (Int), color (Int), alpha (Float), foreground (Boolean): if none of these properties is defined, the joint won\\'t be drawn</BL><br><br>
                <D>tfm.exec.addNPC</D>(<V>name</V>, <V>npcDef</V>, <V>targetPlayer</V>)<br>Add an NPC to the current map.<br>  <V>name</V><G> (String)</G><BL> NPC name.</BL><br>  <V>npcDef</V><G> (Table)</G><BL> The NPC definition</BL><br><BL>    - title (Int): NPC title.</BL><br><BL>    - look (String): NPC look.</BL><br><BL>    - x (int): X position.</BL><br><BL>    - y (int): Y position.</BL><br><BL>    - female (bool): Set True if the NPC is female.</BL><br><BL>    - lookLeft (bool): Set True to make the NPC look to the left.</BL><br><BL>    - lookAtPlayer (bool): Set True to make the NPC look to the player.</BL><br><BL>    - interactive (Boolean): If true, player will be able to click on it.</BL><br>  <V>targetPlayer</V><G> (String)</G><BL> the player who will see the NPC (if nil, applies to all players)</BL> <G>(default nil)</G><br><br>
                <D>tfm.exec.addPhysicObject</D>(<V>id</V>, <V>xPosition</V>, <V>yPosition</V>, <V>bodyDef</V>)<br>Spawns a ground.<br>  <V>id</V><G> (Int)</G><BL> the identifier of the physic object</BL><br>  <V>xPosition</V><G> (Int)</G><BL> the horizontal coordinate of the center of the ground</BL><br>  <V>yPosition</V><G> (Int)</G><BL> the vertical coordinate of the center of the ground</BL><br>  <V>bodyDef</V><G> (Table)</G><BL> the ground description</BL><br><BL>    - type (Int), width (Int), height (Int), foreground (Boolean), friction (Float), restitution (Float), angle (Int), color (Int), miceCollision (Boolean), groundCollision (Boolean)</BL><br><BL>    - dynamic (Boolean), fixedRotation (Boolean), mass (Int), linearDamping (Float), angularDamping (Float) for dynamic grounds, contactListener (Boolean) </BL><br><br>
                <D>tfm.exec.addShamanObject</D>(<V>objectType</V>, <V>xPosition</V>, <V>yPosition</V>, <V>angle</V>, <V>xSpeed</V>, <V>ySpeed</V>, <V>ghost</V>, <V>options</V>)<br>Spawns a shaman object.<br>  <V>objectType</V><G> (Int)</G><BL> the type of the shaman object to spawn</BL><br>  <V>xPosition</V><G> (Int)</G><BL> the horizontal position of the spawn</BL><br>  <V>yPosition</V><G> (Int)</G><BL> the vertical position of the spawn</BL><br>  <V>angle</V><G> (Int)</G><BL> the rotation angle of the object, in degrees</BL> <G>(default 0)</G><br>  <V>xSpeed</V><G> (Int)</G><BL> the horizontal speed of the object</BL> <G>(default 0)</G><br>  <V>ySpeed</V><G> (Int)</G><BL> the vertical speed of the object</BL> <G>(default 0)</G><br>  <V>ghost</V><G> (Boolean)</G><BL> whether the spawned object should be transparent</BL> <G>(default false)</G><br>  <V>options</V><G> (Table)</G><BL> fixedXSpeed (Number), fixedYSpeed (Number), contactListener (bool)</BL><br><R>Returns</R> <G>(Int)</G> <BL>the shaman object identifier</BL><br><br>
                <D>tfm.exec.attachBalloon</D>(<V>playerName</V>, <V>yes</V>, <V>color</V>, <V>transparent</V>, <V>speed</V>)<br>Tie a player to a balloon.<br>  <V>playerName</V><G> (String)</G><BL> the player's nickname</BL><br>  <V>yes</V><G> (Boolean)</G><BL> Attach or dettach the balloon.</BL> <G>(default true)</G><br>  <V>color</V><G> (Int)</G><BL> Balloon color [1-4].</BL> <G>(default 1)</G><br>  <V>transparent</V><G> (Boolean)</G><BL> Make the balloon transparent.</BL> <G>(default false)</G><br>  <V>speed</V><G> (Number)</G><BL> Balloon speed.</BL> <G>(default 1)</G><br><br>
                <D>tfm.exec.changePlayerSize</D>(<V>playerName</V>, <V>size</V>)<br>Changes the size of a player.<br>  <V>playerName</V><G> (String)</G><BL> the player's nickname</BL><br>  <V>size</V><G> (Number)</G><BL> the new size of the player (between 0.1 and 5)</BL> <G>(default 1)</G><br><br>
                <D>tfm.exec.chatMessage</D>(<V>message</V>, <V>playerName</V>)<br>Displays a chat message.<br>  <V>message</V><G> (String)</G><BL> the chat message to display</BL><br>  <V>playerName</V><G> (String)</G><BL> the player who will get the message (if nil, applies to all players)</BL> <G>(default nil)</G><br><br>
                <D>tfm.exec.disableAfkDeath</D>(<V>activate</V>)<br>Deactivates the automatic afk death.<br>  <V>activate</V><G> (Boolean)</G><BL> whether the deactivation should be active</BL> <G>(default true)</G><br><br>
                <D>tfm.exec.disableAllShamanSkills</D>(<V>active</V>)<br>Deactivates all shaman skills.<br>  <V>active</V><G> (Boolean)</G><BL> whether the deactivation should be active</BL> <G>(default true)</G><br><br>
                <D>tfm.exec.disableAutoNewGame</D>(<V>activate</V>)<br>Deactivates the automatic renewal of rounds.<br>  <V>activate</V><G> (Boolean)</G><BL> whether the deactivation should be active</BL> <G>(default true)</G><br><br>
                <D>tfm.exec.disableAutoScore</D>(<V>activate</V>)<br>Deactivates the automatic scoring management.<br>  <V>activate</V><G> (Boolean)</G><BL> whether the deactivation should be active</BL> <G>(default true)</G><br><br>
                <D>tfm.exec.disableAutoShaman</D>(<V>activate</V>)<br>Deactivates the automatic selection of shaman.<br>  <V>activate</V><G> (Boolean)</G><BL> whether the deactivation should be active</BL> <G>(default true)</G><br><br>
                <D>tfm.exec.disableAutoTimeLeft</D>(<V>activate</V>)<br>Deactivates the automatic remaining time change to 20s (when the shaman dies for example).<br>  <V>activate</V><G> (Boolean)</G><BL> whether the deactivation should be active</BL> <G>(default true)</G><br><br>
                <D>tfm.exec.disableDebugCommand</D>(<V>activate</V>)<br>Disables the effects of the /debug command.<br>  <V>activate</V><G> (Boolean)</G><BL> whether the deactivation should be active</BL> <G>(default true)</G><br><br>
                <D>tfm.exec.disableMinimalistMode</D>(<V>activate</V>)<br>Disables the minimalist mode.<br>  <V>activate</V><G> (Boolean)</G><BL> whether the deactivation should be active</BL> <G>(default true)</G><br><br>
                <D>tfm.exec.disableMortCommand</D>(<V>activate</V>)<br>Disables the /mort command.<br>  <V>activate</V><G> (Boolean)</G><BL> whether the deactivation should be active</BL> <G>(default true)</G><br><br>
                <D>tfm.exec.disablePhysicalConsumables</D>(<V>active</V>)<br>Deactivates physical consumables (like in racing and bootcamp rooms).<br>  <V>active</V><G> (Boolean)</G><BL> whether the deactivation should be active</BL> <G>(default true)</G><br><br>
                <D>tfm.exec.disablePrespawnPreview</D>(<V>display</V>)<br>Enables or disables the shaman objects prespawn preview.<br>  <V>display</V><G> (Boolean)</G><BL> whether the prespawn preview should not be displayed</BL> <G>(default true)</G><br><br>
                <D>tfm.exec.disableWatchCommand</D>(<V>activate</V>)<br>Disables the effects of the /watch command.<br>  <V>activate</V><G> (Boolean)</G><BL> whether the deactivation should be active</BL> <G>(default true)</G><br><br>
                <D>tfm.exec.displayParticle</D>(<V>particleType</V>, <V>xPosition</V>, <V>yPosition</V>, <V>xSpeed</V>, <V>ySpeed</V>, <V>xAcceleration</V>, <V>yAcceleration</V>, <V>targetPlayer</V>)<br>Displays a particle.<br>  <V>particleType</V><G> (Int)</G><BL> the kind of particle you want to display</BL><br>  <V>xPosition</V><G> (Int)</G><BL> the horizontal coordinate of the particle</BL><br>  <V>yPosition</V><G> (Int)</G><BL> the vertical coordinate of the particle</BL><br>  <V>xSpeed</V><G> (Number)</G><BL> the horizontal speed of the particle</BL> <G>(default 0)</G><br>  <V>ySpeed</V><G> (Number)</G><BL> the vertical speed of the particle</BL> <G>(default 0)</G><br>  <V>xAcceleration</V><G> (Number)</G><BL> the horizontal acceleration of the particle</BL> <G>(default 0)</G><br>  <V>yAcceleration</V><G> (Number)</G><BL> the vertical acceleration of the particle</BL> <G>(default 0)</G><br>  <V>targetPlayer</V><G> (String)</G><BL> the player who should see the particle (if nil, applies to all players)</BL> <G>(default nil)</G><br><br>
                <D>tfm.exec.explosion</D>(<V>xPosition</V>, <V>yPosition</V>, <V>power</V>, <V>radius</V>, <V>miceOnly</V>)<br>Throws an explosion.<br>  <V>xPosition</V><G> (Int)</G><BL> the horizontal coordinate of the center of the explosion</BL><br>  <V>yPosition</V><G> (Int)</G><BL> the vertical coordinate of the center of the explosion</BL><br>  <V>power</V><G> (Int)</G><BL> the maximum power of the explosion</BL><br>  <V>radius</V><G> (Int)</G><BL> the explosion radius (players further away won\\'t be affected)</BL><br>  <V>miceOnly</V><G> (Boolean)</G><BL> whether the explosion should affect only mice, or objects too</BL> <G>(default false)</G><br><br>
                <D>tfm.exec.freezePlayer</D>(<V>playerName</V>, <V>freeze</V>, <V>displayIce</V>)<br>Froze a player.<br>  <V>playerName</V><G> (String)</G><BL> the player's nickname</BL><br>  <V>freeze</V><G> (Boolean)</G><BL> Freeze or unfreeze</BL> <G>(default true)</G><br>  <V>displayIce</V><G> (Boolean)</G><BL> Display or not ice on the mouse.</BL> <G>(default true)</G><br><br>
                <D>tfm.exec.getPlayerSync</D>()<br>Get current player sync.<br><br>
                <D>tfm.exec.giveCheese</D>(<V>playerName</V>)<br>Gives the cheese to a player.<br>  <V>playerName</V><G> (String)</G><BL> the player who should get the cheese</BL><br><br>
                <D>tfm.exec.giveConsumables</D>(<V>playerName</V>, <V>consumableId</V>, <V>amount</V>)<br>Gives consumables to the targeted player.<br>  <V>playerName</V><G> (String)</G><BL> the player to give the gift to</BL><br>  <V>consumableId</V><G> (String)</G><BL> the consumable identifier</BL><br>  <V>amount</V><G> (String)</G><BL> the amount of consumables to give</BL> <G>(default "1")</G><br><br>
                <D>tfm.exec.giveMeep</D>(<V>playerName</V>, <V>canMeep</V>)<br>Gives the meep competence to a player, or removes it.<br>  <V>playerName</V><G> (String)</G><BL> the player's nickname</BL><br>  <V>canMeep</V><G> (Boolean)</G><BL> whether the player should be able to meep</BL> <G>(default true)</G><br><br>
                <D>tfm.exec.giveTransformations</D>(<V>playerName</V>, <V>canTransform</V>)<br>Gives the transformations to a player, or removes them.<br>  <V>playerName</V><G> (String)</G><BL> the player's nickname</BL><br>  <V>canTransform</V><G> (Boolean)</G><BL> whether the player should be able to use transformations</BL> <G>(default true)</G><br><br>
                <D>tfm.exec.kickPlayer</D>(<V>playerName</V>)<br>Kicks the selected player.<br>  <V>playerName</V><G> (String)</G><BL> the player to kick</BL><br><br>
                <D>tfm.exec.killPlayer</D>(<V>playerName</V>)<br>Kills the selected player.<br>  <V>playerName</V><G> (String)</G><BL> the player to kill</BL><br><br>
                <D>tfm.exec.linkMice</D>(<V>playerName1</V>, <V>playerName2</V>, <V>linked</V>)<br>Allows to link players like in soulmate maps.<br>  <V>playerName1</V><G> (String)</G><BL> the first player's nickname</BL><br>  <V>playerName2</V><G> (String)</G><BL> the second player's nickname</BL><br>  <V>linked</V><G> (Boolean)</G><BL> whether the two players should be linked</BL> <G>(default true)</G><br><br>
                <D>tfm.exec.lowerSyncDelay</D>(<V>playerName</V>)<br>Lowers the synchronization delay of a player to 400ms max<br>  <V>playerName</V><G> (String)</G><BL> the player who should have a lower sync delay</BL><br><br>
                <D>tfm.exec.moveObject</D>(<V>objectId</V>, <V>xPosition</V>, <V>yPosition</V>, <V>positionOffset</V>, <V>xSpeed</V>, <V>ySpeed</V>, <V>speedOffset</V>, <V>angle</V>, <V>angleOffset</V>)<br>Defines the speed and position of a shaman object.<br>  <V>objectId</V><G> (Int)</G><BL> the shaman object identifier</BL><br>  <V>xPosition</V><G> (Int)</G><BL> the horizontal coordinate of the point where the object will be moved</BL><br>  <V>yPosition</V><G> (Int)</G><BL> the vertical coordinate of the point where the object will be moved</BL><br>  <V>positionOffset</V><G> (Boolean)</G><BL> whether the specified position is an offset to apply to the current one, or the absolute one</BL> <G>(default false)</G><br>  <V>xSpeed</V><G> (Int)</G><BL> the horizontal coordinate of the speed to give to the object</BL> <G>(default 0)</G><br>  <V>ySpeed</V><G> (Int)</G><BL> the vertical coordinate of the speed to give to the object</BL> <G>(default 0)</G><br>  <V>speedOffset</V><G> (Boolean)</G><BL> whether the specified speed is an offset to apply to the current one, or the absolute one</BL> <G>(default false)</G><br>  <V>angle</V><G> (Int)</G><BL> the angle of the the object</BL> <G>(default 0)</G><br>  <V>angleOffset</V><G> (Boolean)</G><BL> whether the specified angle is an offset to apply to the current one, or the absolute one</BL> <G>(default false)</G><br><br>
                <D>tfm.exec.movePhysicObject</D>(<V>objectId</V>, <V>xPosition</V>, <V>yPosition</V>, <V>positionOffset</V>, <V>xSpeed</V>, <V>ySpeed</V>, <V>speedOffset</V>, <V>angle</V>, <V>angleOffset</V>)<br>Defines the speed and position of a physic object.<br>  <V>objectId</V><G> (Int)</G><BL> The physic object identifier</BL><br>  <V>xPosition</V><G> (Int)</G><BL> the horizontal coordinate of the point where the object will be moved</BL><br>  <V>yPosition</V><G> (Int)</G><BL> the vertical coordinate of the point where the object will be moved</BL><br>  <V>positionOffset</V><G> (Boolean)</G><BL> whether the specified position is an offset to apply to the current one, or the absolute one</BL> <G>(default false)</G><br>  <V>xSpeed</V><G> (Int)</G><BL> the horizontal coordinate of the speed to give to the object</BL> <G>(default 0)</G><br>  <V>ySpeed</V><G> (Int)</G><BL> the vertical coordinate of the speed to give to the object</BL> <G>(default 0)</G><br>  <V>speedOffset</V><G> (Boolean)</G><BL> whether the specified speed is an offset to apply to the current one, or the absolute one</BL> <G>(default false)</G><br>  <V>angle</V><G> (Int)</G><BL> the angle of the the object</BL> <G>(default 0)</G><br>  <V>angleOffset</V><G> (Boolean)</G><BL> whether the specified angle is an offset to apply to the current one, or the absolute one</BL> <G>(default false)</G><br><br>
                <D>tfm.exec.movePlayer</D>(<V>playerName</V>, <V>xPosition</V>, <V>yPosition</V>, <V>positionOffset</V>, <V>xSpeed</V>, <V>ySpeed</V>, <V>speedOffset</V>)<br>Defines the speed and position of a player.<br>  <V>playerName</V><G> (String)</G><BL> the player to move</BL><br>  <V>xPosition</V><G> (Int)</G><BL> the horizontal coordinate of the point where the player will be moved</BL><br>  <V>yPosition</V><G> (Int)</G><BL> the vertical coordinate of the point where the player will be moved</BL><br>  <V>positionOffset</V><G> (Boolean)</G><BL> whether the specified position an offset to apply to the current one, or the absolute one</BL> <G>(default false)</G><br>  <V>xSpeed</V><G> (Int)</G><BL> the horizontal coordinate of the speed to give to the player</BL> <G>(default 0)</G><br>  <V>ySpeed</V><G> (Int)</G><BL> the vertical coordinate of the speed to give to the player</BL> <G>(default 0)</G><br>  <V>speedOffset</V><G> (Boolean)</G><BL> whether the specified speed an offset to apply to the current one, or the absolute one</BL> <G>(default false)</G><br><br>
                <D>tfm.exec.newGame</D>(<V>mapCode</V>, <V>flipped</V>)<br>Starts a new game<br>  <V>mapCode</V><G> (String)</G><BL> the map code</BL> <G>(default nil)</G><br><BL>    - nil (a random map)</BL><br><BL>    - 6 (vanilla map)</BL><br><BL>    - @42583 (editor map)</BL><br><BL>    - #4 (perm category map)</BL><br><BL>    - anything beginning with \\'&lt;\\' (xml map)</BL><br>  <V>flipped</V><G> (Boolean)</G><BL> whether the map should be flipped</BL> <G>(default nil (randomly mirrored in racing and bootcamp rooms, unless))</G><br><br>
                <D>tfm.exec.playEmote</D>(<V>playerName</V>, <V>emoteId</V>, <V>emoteArg</V>)<br>Makes a player do an emote.<br>  <V>playerName</V><G> (String)</G><BL> the player who should do the emote</BL><br>  <V>emoteId</V><G> (Int)</G><BL> the emote to do</BL><br>  <V>emoteArg</V><G> (String)</G><BL> the emote attribute (for the flag emote for example)</BL> <G>(default nil)</G><br><br>
                <D>tfm.exec.playMusic</D>(<V>music</V>, <V>Channel</V>, <V>volume</V>, <V>loop</V>, <V>fade</V>, <V>targetPlayer</V>)<br>Play a music. A music can be stopped. Musics list can be found here : http://audio.atelier801.com/sounds.html<br>  <V>music</V><G> (String)</G><BL> URL of the music.</BL><br>  <V>Channel</V><G> (String)</G><BL> Channel of the music. Only one music can be played per channel. If a music is playing, it will be stopped.</BL><br>  <V>volume</V><G> (Int)</G><BL> Volume of the sound (0-100).</BL> <G>(default 70)</G><br>  <V>loop</V><G> (Boolean)</G><BL> If the music should be looping.</BL> <G>(default false)</G><br>  <V>fade</V><G> (Boolean)</G><BL> If the music should start with a fading.</BL> <G>(default true)</G><br>  <V>targetPlayer</V><G> (Int)</G><BL> Send only to this specific player (if nil, applies to all players).</BL> <G>(default nil)</G><br><br>
                <D>tfm.exec.playSound</D>(<V>sound</V>, <V>volume</V>, <V>soundPosX</V>, <V>soundPosY</V>, <V>targetPlayer</V>)<br>Play a sound. Sounds list can be found here : http://audio.atelier801.com/sounds.html<br>  <V>sound</V><G> (String)</G><BL> URL of the sound.</BL><br>  <V>volume</V><G> (Int)</G><BL> Volume of the sound (0-100).</BL> <G>(default 70)</G><br>  <V>soundPosX</V><G> (Int)</G><BL> X position of the sound. If not nil, the further away the player is, the more the sound is reduced.</BL> <G>(default nil)</G><br>  <V>soundPosY</V><G> (Int)</G><BL> Y position of the sound.</BL> <G>(default nil)</G><br>  <V>targetPlayer</V><G> (Int)</G><BL> Send only to this specific player (if nil, applies to all players).</BL> <G>(default nil)</G><br><br>
                <D>tfm.exec.playerVictory</D>(<V>playerName</V>)<br>Makes a player enter the hole. It only works if the player already has a cheese!<br>  <V>playerName</V><G> (String)</G><BL> the player who should win</BL><br><br>
                <D>tfm.exec.removeBonus</D>(<V>id</V>, <V>targetPlayer</V>)<br>Remove a defilante bonus.<br>  <V>id</V><G> (Int)</G><BL> Identifier.</BL> <G>(default 0)</G><br>  <V>targetPlayer</V><G> (String)</G><BL> Send only to this specific player.</BL> <G>(default nil)</G><br><br>
                <D>tfm.exec.removeCheese</D>(<V>playerName</V>)<br>Takes away the cheese from a player.<br>  <V>playerName</V><G> (String)</G><BL> the player who should get their cheese removed</BL><br><br>
                <D>tfm.exec.removeImage</D>(<V>imageId</V>, <V>fadeOut</V>)<br>Removes an image.<br>  <V>imageId</V><G> (Int)</G><BL> the image identifier</BL><br>  <V>fadeOut</V><G> (Boolean)</G><BL> Use a fade out to remove the image.</BL> <G>(default false)</G><br><br>
                <D>tfm.exec.removeJoint</D>(<V>id</V>)<br>Removes a joint from the game.<br>  <V>id</V><G> (Int)</G><BL> the identifier of the joint to remove</BL><br><br>
                <D>tfm.exec.removeObject</D>(<V>objectId</V>)<br>Removes a shaman object.<br>  <V>objectId</V><G> (Int)</G><BL> the shaman object identifier</BL><br><br>
                <D>tfm.exec.removePhysicObject</D>(<V>id</V>)<br>Removes a ground from the game.<br>  <V>id</V><G> (Int)</G><BL> the identifier of the ground to remove</BL><br><br>
                <D>tfm.exec.respawnPlayer</D>(<V>playerName</V>)<br>Respawns a player.<br>  <V>playerName</V><G> (String)</G><BL> the player to respawn</BL><br><br>
                <D>tfm.exec.setAieMode</D>(<V>enable</V>, <V>sensibility</V>, <V>targetPlayer</V>)<br>Enable \\'Aie\\' mode when mice can die when they hit something too hard. Last until the next map.<br>  <V>enable</V><G> (Boolean)</G><BL> Enabled or disable \\'Aie\\' mode.</BL> <G>(default true)</G><br>  <V>sensibility</V><G> (Number)</G><BL> Sensibility of the \\'Aie\\' mode.</BL> <G>(default 1)</G><br>  <V>targetPlayer</V><G> (String)</G><BL> Target player (nil for all player in room).</BL> <G>(default nil)</G><br><br>
                <D>tfm.exec.setAutoMapFlipMode</D>(<V>flipped</V>)<br>Sets whether the following maps should be flipped (always, never, or TFM's default behaviour).<br>  <V>flipped</V><G> (Boolean)</G><BL> whether the maps should be flipped</BL> <G>(default nil (the default TFM behaviour))</G><br><br>
                <D>tfm.exec.setGameTime</D>(<V>time</V>, <V>init</V>)<br>Sets the game remaining time.<br>  <V>time</V><G> (Int)</G><BL> the remaining time in seconds</BL><br>  <V>init</V><G> (Boolean)</G><BL> whether the remaining time should change even if the specified remaining time is higher than the current one</BL> <G>(default true)</G><br><br>
                <D>tfm.exec.setNameColor</D>(<V>playerName</V>, <V>color</V>)<br>Changes a player's nickname's color.<br>  <V>playerName</V><G> (String)</G><BL> the player whose nickname  should be colored</BL><br>  <V>color</V><G> (Int)</G><BL> the color of the nickname</BL><br><br>
                <D>tfm.exec.setPlayerCollision</D>(<V>playerName</V>, <V>collisionType</V>, <V>categoryBits</V>, <V>maskBits</V>)<br>Set the collision type for a player.<br>  <V>playerName</V><G> (String)</G><BL> Targeted player name (if playerName is * target all player in the room).</BL><br>  <V>collisionType</V><G> (Number)</G><BL> Collision type : 1=normal, 2=Collide with mice, can be 0, 3, 4 or 5 but no idea what it do.</BL><br>  <V>categoryBits</V><G> (Number)</G><BL> If collision type is -1, you can set the category bits by hand.</BL> <G>(default 0)</G><br>  <V>maskBits</V><G> (Number)</G><BL> If collision type is -1, you can set the mask bits by hand.</BL> <G>(default 0)</G><br><br>
                <D>tfm.exec.setPlayerGravityScale</D>(<V>playerName</V>, <V>gravityScale</V>, <V>windScale</V>)<br>Set the world gravity and wind scale for a player.<br>  <V>playerName</V><G> (String)</G><BL> Targeted player name.</BL><br>  <V>gravityScale</V><G> (Number)</G><BL> Gravity scale value.</BL> <G>(default 1)</G><br>  <V>windScale</V><G> (Number)</G><BL> Wind scale value.</BL> <G>(default 1)</G><br><br>
                <D>tfm.exec.setPlayerLook</D>(<V>playerName</V>, <V>look</V>)<br>Change a player's look.<br>  <V>playerName</V><G> (String)</G><BL> Targeted player name.</BL><br>  <V>look</V><G> (Number)</G><BL> Look string.</BL> <G>(default 1;0,0,0,0,0,0,0,0,0,0,0,0)</G><br><br>
                <D>tfm.exec.setPlayerNightMode</D>(<V>nightMode</V>, <V>playerName</V>)<br>Set the night mode for a player.<br>  <V>nightMode</V><G> (Boolean)</G><BL> Enable or disable the night mode.</BL> <G>(default true)</G><br>  <V>playerName</V><G> (String)</G><BL> Targeted player name. If nil affect all player in room.</BL><br><br>
                <D>tfm.exec.setPlayerScore</D>(<V>playerName</V>, <V>score</V>, <V>add</V>)<br>Sets the player's score.<br>  <V>playerName</V><G> (String)</G><BL> the player who should get his or her score changed</BL><br>  <V>score</V><G> (Int)</G><BL> the score</BL><br>  <V>add</V><G> (Boolean)</G><BL> whether the current score should be added to the specified one</BL> <G>(default false)</G><br><br>
                <D>tfm.exec.setPlayerSync</D>(<V>playerName</V>)<br>Set current player sync.<br>  <V>playerName</V><G> (String)</G><BL> Target player name (Nil to let the server decide, \\'none\\' to disable sync).</BL><br><br>
                <D>tfm.exec.setRoomMaxPlayers</D>(<V>maxPlayers</V>)<br>Sets the max number of players in a room.<br>  <V>maxPlayers</V><G> (Int)</G><BL> the maximum number of players the room can hold</BL><br><br>
                <D>tfm.exec.setRoomPassword</D>(<V>password</V>)<br>Password-protects a room.<br>  <V>password</V><G> (String)</G><BL> the string to set as the password (an empty string removes the protection)</BL><br><br>
                <D>tfm.exec.setShaman</D>(<V>playerName</V>, <V>makeAShaman</V>)<br>Makes a player a shaman.<br>  <V>playerName</V><G> (String)</G><BL> the player who should become a shaman</BL><br>  <V>makeAShaman</V><G> (Boolean)</G><BL> whether the player should be a shaman</BL> <G>(default true)</G><br><br>
                <D>tfm.exec.setShamanMode</D>(<V>playerName</V>, <V>mode</V>)<br>Changes the shaman mode of a player.<br>  <V>playerName</V><G> (String)</G><BL> the player's nickname who will have another shaman mode</BL><br>  <V>mode</V><G> (Int)</G><BL> the new shaman mode of the target (use nil to use the player's real mode)</BL> <G>(default nil)</G><br><br>
                <D>tfm.exec.setVampirePlayer</D>(<V>playerName</V>, <V>makeAVampire</V>)<br>Makes a player a vampire.<br>  <V>playerName</V><G> (String)</G><BL> the player to make a vampire</BL><br>  <V>makeAVampire</V><G> (Boolean)</G><BL> whether the player should be a vampire</BL> <G>(default true)</G><br><br>
                <D>tfm.exec.setWorldGravity</D>(<V>x</V>, <V>y</V>)<br>Set the world gravity.<br>  <V>x</V><G> (Int)</G><BL> Gravity on x axis.</BL> <G>(default 0)</G><br>  <V>y</V><G> (Int)</G><BL> Gravity on y axis</BL> <G>(default 10)</G><br><br>
                <D>tfm.exec.snow</D>(<V>duration</V>, <V>snowballPower</V>)<br>Makes the snow fall.<br>  <V>duration</V><G> (Int)</G><BL> the snowfall duration in seconds</BL> <G>(default 60)</G><br>  <V>snowballPower</V><G> (Int)</G><BL> </BL> <G>(default 10)</G><br><br>
                <D>tfm.exec.stopMusic</D>(<V>Channel</V>, <V>targetPlayer</V>)<br>Stop a playing music.<br>  <V>Channel</V><G> (String)</G><BL> Music channel to stop.</BL><br>  <V>targetPlayer</V><G> (Int)</G><BL> Send only to this specific player (if nil, applies to all players).</BL> <G>(default nil)</G><br><br>
                <D>ui.addPopup</D>(<V>id</V>, <V>type</V>, <V>text</V>, <V>targetPlayer</V>, <V>x</V>, <V>y</V>, <V>width</V>, <V>fixedPos</V>)<br>Displays a popup.<br>  <V>id</V><G> (Int)</G><BL> the identifier of the popup</BL><br>  <V>type</V><G> (Int)</G><BL> the popup type (0 for simple, 1 for yes or no, 2 for player input)</BL><br>  <V>text</V><G> (String)</G><BL> the text to display</BL><br>  <V>targetPlayer</V><G> (String)</G><BL> the player who will see the popup (if nil, applies to all players)</BL><br>  <V>x</V><G> (Int)</G><BL> the horizontal coordinate of the top-left corner</BL> <G>(default 50)</G><br>  <V>y</V><G> (Int)</G><BL> the vertical coordinate of the top-left corner</BL> <G>(default 50)</G><br>  <V>width</V><G> (Int)</G><BL> the width in pixels of the popup (if 0, it will be ajusted to the text width)</BL> <G>(default 0)</G><br>  <V>fixedPos</V><G> (Boolean)</G><BL> whether the position is fixed or if it should follow the player's camera on long maps</BL> <G>(default false)</G><br><br>
                <D>ui.addTextArea</D>(<V>id</V>, <V>text</V>, <V>targetPlayer</V>, <V>x</V>, <V>y</V>, <V>width</V>, <V>height</V>, <V>backgroundColor</V>, <V>borderColor</V>, <V>backgroundAlpha</V>, <V>fixedPos</V>)<br>Displays a text area.<br>  <V>id</V><G> (Int)</G><BL> the identifier of the text area</BL><br>  <V>text</V><G> (String)</G><BL> the text to display</BL><br>  <V>targetPlayer</V><G> (String)</G><BL> the player who will see the text area (if nil, applies to all players)</BL> <G>(default nil)</G><br>  <V>x</V><G> (Int)</G><BL> the horizontal coordinate of the top-left corner</BL> <G>(default 50)</G><br>  <V>y</V><G> (Int)</G><BL> the vertical coordinate of the top-left corner</BL> <G>(default 50)</G><br>  <V>width</V><G> (Int)</G><BL> the width in pixels of the text area (if 0, it will be ajusted to the text width)</BL> <G>(default 0)</G><br>  <V>height</V><G> (Int)</G><BL> the height in pixels of the text area (if 0, it will be ajusted to the text height)</BL> <G>(default 0)</G><br>  <V>backgroundColor</V><G> (Int)</G><BL> the background color of the text area</BL> <G>(default 0x324650)</G><br>  <V>borderColor</V><G> (Int)</G><BL> the border color of the text area</BL> <G>(default 0)</G><br>  <V>backgroundAlpha</V><G> (Number)</G><BL> the background's opacity, from 0 (transparent) to 1 (opaque)</BL> <G>(default 1)</G><br>  <V>fixedPos</V><G> (Boolean)</G><BL> whether the position is fixed or if it should follow the player's camera on long maps</BL> <G>(default false)</G><br><br>
                <D>ui.removeTextArea</D>(<V>id</V>, <V>targetPlayer</V>)<br>Removes a text area.<br>  <V>id</V><G> (Int)</G><BL> the identifier of the text area</BL><br>  <V>targetPlayer</V><G> (String)</G><BL> the player whom the text area will disappear (if nil, applies to all players)</BL> <G>(default nil)</G><br><br>
                <D>ui.setBackgroundColor</D>(<V>color</V>)<br>Set the background color. Last one game.<br>  <V>color</V><G> (String)</G><BL> Background color.</BL> <G>(default "#6A7495")</G><br><br>
                <D>ui.setMapName</D>(<V>text</V>)<br>Sets the map name.<br>  <V>text</V><G> (String)</G><BL> the text to display as the map name</BL><br><br>
                <D>ui.setShamanName</D>(<V>text</V>)<br>Sets the shaman name.<br>  <V>text</V><G> (String)</G><BL> the text to display as the shaman name</BL><br><br>
                <D>ui.showColorPicker</D>(<V>id</V>, <V>targetPlayer</V>, <V>defaultColor</V>, <V>title</V>)<br>Displays a color picker.<br>  <V>id</V><G> (Int)</G><BL> the identifier of the color picker</BL><br>  <V>targetPlayer</V><G> (String)</G><BL> the player who will see the color picker (if nil, applies to all players)</BL> <G>(default nil)</G><br>  <V>defaultColor</V><G> (Int)</G><BL> the default color on the color picker</BL> <G>(default 0)</G><br>  <V>title</V><G> (String)</G><BL> the title of the color picker</BL> <G>(default nil)</G><br><br>
                <D>ui.updateTextArea</D>(<V>id</V>, <V>text</V>, <V>targetPlayer</V>)<br>Updates the content of a text area.<br>  <V>id</V><G> (Int)</G><BL> the identifier of the text area</BL><br>  <V>text</V><G> (String)</G><BL> the new text to display</BL><br>  <V>targetPlayer</V><G> (String)</G><BL> the player who will get displayed the new text (if nil, applies to all players)</BL> <G>(default nil)</G><br><br>
                """;

        CommandHandler.sendLogMessage(player, 1, builder);
    }
}